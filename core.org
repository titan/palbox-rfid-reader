#+STARTUP: indent
* 核心系统
** 基本框架
#+begin_src c :tangle /dev/shm/rfid-reader/rfid-reader.c
  #include <stddef.h>
  #include <string.h>
  #include <libopencm3/stm32/dbgmcu.h>
  #include <libopencm3/stm32/gpio.h>
  #include <libopencm3/stm32/iwdg.h>
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/usart.h>
  #include <libopencm3/stm32/f1/bkp.h>
  #include <libopencm3/stm32/pwr.h>
  #include <libopencm3/cm3/systick.h>
  #include "defination.h"
  #include "ring.h"
  #include "console.h"
  #include "utility.h"
  #include "uart.h"
  #include "led.h"
  #include "rfid.h"
  #include "task-fsm.h"
  #include "core-fsm.h"
  #include "sbtree.h"
  #include "epigyny.h"

  #define sync_timestamp(result) do {                     \
      if (result->parameter.timestamp > MIN_TIMESTAMP) {  \
        timestamp = result->parameter.timestamp;          \
        zone = result->parameter.zone;                    \
        PWR_CR |= PWR_CR_DBP;                             \
        BKP_DR1 = timestamp;                              \
        BKP_DR2 = (timestamp >> 32);                      \
        PWR_CR &= ~PWR_CR_DBP;                            \
      }                                                   \
    } while (0)

  volatile uint32_t sn = 0;
  volatile int64_t timestamp = 0;
  volatile int64_t zone = 0;
  volatile uint32_t systick = 0;
  uint32_t randkey[4];
  uint8_t * uid = (uint8_t *)randkey;
  uint32_t task_state;
  uint32_t core_state;

  struct uart_context_t uart1_context;
  struct uart_context_t uart4_context;

  <<rfid-cache-define>>
  <<core-context>>
  struct core_context_t core_context;
  <<rfid-get-key>>
  <<rfid-callback>>

  void sys_tick_handler(void);

  void sys_tick_handler(void) {
    systick ++;
    timestamp ++;
  }

  <<epigyny-callback-prototype>>

  <<setup>>
  <<mainloop>>
  <<task-fsm>>
  <<core-fsm>>
  <<epigyny-callback>>
#+end_src
** 配置
#+begin_src c :noweb-ref setup
  static void setup(void) {
    bzero(&uart1_context, sizeof(struct uart_context_t));
    uart1_context.setup = rfid_setup;

    uart_init(1, &uart1_context);

    uart4_context.setup = epigyny_setup;

    uart_init(4, &uart4_context);

    bzero(&core_context, sizeof(struct core_context_t));

    rcc_clock_setup_in_hse_8mhz_out_72mhz();
    rcc_periph_clock_enable(RCC_AFIO);
    rcc_peripheral_enable_clock(&RCC_APB1ENR, RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN);
    //gpio_primary_remap(AFIO_MAPR_SWJ_CFG_JTAG_OFF_SW_ON, AFIO_MAPR_USART3_REMAP_NO_REMAP);

    uint64_t restored_timestamp = BKP_DR1 | (((uint64_t) BKP_DR2) << 32);

    if (restored_timestamp > MIN_TIMESTAMP) {
      timestamp = (int64_t) restored_timestamp;
    }
  #ifdef DEBUG
    console_setup();
  #endif
    uart_setup();
    led_setup();

    systick = 0;

    /* 72MHz / 8 => 9,000,000 counts per second */
    systick_set_clocksource(STK_CSR_CLKSOURCE_AHB_DIV8);

    /* 9,000,000/9,000 = 1000 overflows per second - every 1 ms one interrupt */
    /* SysTick interrupt every N clock pulses: set reload to N-1 */
    systick_set_reload(8999);
    systick_interrupt_enable();

    systick_counter_enable();

    randkey[0] = *(uint32_t*)(0x1ffff7e8);
    randkey[1] = *(uint32_t*)(0x1ffff7ec);
    randkey[2] = *(uint32_t*)(0x1ffff7f0);

    iwdg_set_period_ms(30000);
    iwdg_start();

  }
#+end_src
** 主循环
#+begin_src c :noweb-ref mainloop
  uint32_t rfid_timer = 0;
  uint32_t inventory_timer = 0;
  uint32_t difference_timer = 0;
  uint32_t cooldown_timer = 0;
  uint32_t reboot_timer = 0;

  int main(void) {

    setup();
    console_string("rfid-reader start\r\n");
    for (int i = 0; i < 12; i ++) {
      console_byte((uint8_t)*(((uint8_t *)randkey) + i));
      console_string(" ");
    }
    console_newline();

    reboot_timer = systick + 10 * 60 * 1000;
    uint32_t loop_timer = systick;
    uart_start();
    rfid_cache_init();
    task_state = task_transform_state(task_state, TASK_SCAN_EVENT, NULL);
    core_state = CORE_READY_STATE;

    while (1) {
      if (systick > loop_timer) {
        loop_timer = systick + 999; // interval of one second
        if (systick < reboot_timer) {
          iwdg_reset();
        } else {
          console_log("Stopping to feed watch dog\r\n");
        }
        if (task_state == TASK_SCANNING_STATE) {
          if (systick > rfid_timer) {
            task_state = task_transform_state(task_state, TASK_TIMEOUT_EVENT, NULL);
          }
          reboot_timer = systick + 10 * 60 * 1000;
        }
        if (core_state == CORE_INVENTORYING_STATE) {
          if (systick > inventory_timer) {
            core_state = core_transform_state(core_state, CORE_TIMEOUT_EVENT, &core_context);
          }
          reboot_timer = systick + 10 * 60 * 1000;
        } else if (core_state == CORE_DIFFERENCING_STATE) {
          if (systick > difference_timer) {
            core_state = core_transform_state(core_state, CORE_TIMEOUT_EVENT, &core_context);
          }
          reboot_timer = systick + 10 * 60 * 1000;
        } else if (core_state == CORE_INVENTORY_COOLDOWN_STATE) {
          if (systick > cooldown_timer) {
            core_state = core_transform_state(core_state, CORE_TIMEOUT_EVENT, &core_context);
          }
          reboot_timer = systick + 10 * 60 * 1000;
        } else if (core_state == CORE_DIFFERENCE_COOLDOWN_STATE) {
          if (systick > cooldown_timer) {
            core_state = core_transform_state(core_state, CORE_TIMEOUT_EVENT, &core_context);
          }
          reboot_timer = systick + 10 * 60 * 1000;
        }
      }

      uart_eventloop();
    }

    return 0;
  }
#+end_src
** RFID 缓存
*** 定义
由于 size balanced tree 不保存卫星数据， 因此引入 rfid data 用于保存标
签数据。
#+begin_src c :noweb-ref rfid-cache-define
  #define MAXRFID 300
  #define TAGSIZE 6
  static struct sbtree_t tree1, tree2;
  static sbtidx_t rfid_sbtree_left1[MAXRFID], rfid_sbtree_right1[MAXRFID], rfid_sbtree_size1[MAXRFID], rfid_sbtree_key1[MAXRFID];
  static sbtidx_t rfid_sbtree_left2[MAXRFID], rfid_sbtree_right2[MAXRFID], rfid_sbtree_size2[MAXRFID], rfid_sbtree_key2[MAXRFID];
  static struct sbtree_t * cache_old, * cache_young;
  static uint8_t rfid_data1[MAXRFID * TAGSIZE], rfid_data2[MAXRFID * TAGSIZE];
  static uint8_t * data_old, * data_young;

  static void rfid_cache_init(void) {
    sbtree_init(&tree1, rfid_sbtree_left1, rfid_sbtree_right1, rfid_sbtree_size1, rfid_sbtree_key1, MAXRFID);
    sbtree_init(&tree2, rfid_sbtree_left2, rfid_sbtree_right2, rfid_sbtree_size2, rfid_sbtree_key2, MAXRFID);
    cache_old = &tree1;
    cache_young = &tree2;
    data_old = (uint8_t *) rfid_data1;
    data_young = (uint8_t *) rfid_data2;
    bzero(data_old, MAXRFID * TAGSIZE);
    bzero(data_young, MAXRFID * TAGSIZE);
  }
#+end_src
*** 计算 KEY
根据标签数据计算得到 size balanced tree 所需的 key。
#+begin_src c :noweb-ref rfid-get-key
  static sbtidx_t getkey(uint8_t * tag, size_t len) {
    (void) len;
    uint8_t lsb = tag[0] ^ tag[2] ^ tag[4];
    uint8_t msb = tag[1] ^ tag[3] ^ tag[5];
    return (msb << 8) | lsb;
  }
#+end_src
** RFID 回调
#+begin_src c :noweb-ref rfid-callback
  void rfid_callback(uint8_t * tag, size_t len) {
    void * data[2];
    data[0] = tag;
    data[1] = &len;
    task_state = task_transform_state(task_state, TASK_SCANNED_EVENT, data);
  }
#+end_src
** 任务状态机
#+begin_src c :noweb-ref task-fsm
  void task_do_action(enum TASK_ACTION action, void * data) {
    switch (action) {
    case TASK_SWAP_AND_SCAN_ACTION: {
      struct sbtree_t * tmp = cache_old;
      cache_old = cache_young;
      cache_young = tmp;
      uint8_t * temp = data_old;
      data_old = data_young;
      data_young = temp;
      sbtree_clear(cache_young);
      bzero(temp, MAXRFID * TAGSIZE);
      rfid_scan();
      rfid_timer = systick + 9999;
      break;
    }
    case TASK_SAVE_TO_YOUNG_CACHE_ACTION: {
      uint8_t * tag = * (uint8_t **) data;
      size_t len = * (size_t *)(((size_t **) data)[1]);
      sbtidx_t key = getkey(tag, len);
      if (sbtree_find(cache_young, key) == 0) {
        sbtidx_t pos = sbtree_insert(cache_young, key);
        /*
        console_log("key: ");
        console_number(key);
        console_string(", len: ");
        console_number(len);
        console_string(", pos: ");
        console_number(pos);
        console_newline();
        */
        memcpy(data_young + pos * TAGSIZE, tag, len);
      }
      break;
    }
    case TASK_STOP_SCAN_ACTION:
      rfid_stop();
      break;
    }
  }
#+end_src

** 核心状态机
*** 上下文
#+begin_src c :noweb-ref core-context
  struct core_context_t {
    uint8_t door;
    uint16_t num;
    uint16_t increment;
    uint16_t decrement;
    uint8_t data_scope;
    uint16_t offset;
    uint8_t newtags[MAXRFID * TAGSIZE];
    uint8_t missingtags[MAXRFID * TAGSIZE];
  };
#+end_src
*** 执行动作

#+begin_src c :noweb-ref core-fsm
  static void new_seq(struct sbtree_t * tree, sbtidx_t t, void * data, size_t len) {
    (void) tree;
    (void) len;
    struct core_context_t * ctx = (struct core_context_t *) data;
    if (sbtree_find(cache_old, getkey(data_young + t * TAGSIZE, TAGSIZE)) == 0) {
      ctx->newtags[ctx->increment ++] = t;
    }
  }

  static void missing_seq(struct sbtree_t * tree, sbtidx_t t, void * data, size_t len) {
    (void) tree;
    (void) len;
    struct core_context_t * ctx = (struct core_context_t *) data;
    if (sbtree_find(cache_young, getkey(data_old + t * TAGSIZE, TAGSIZE)) == 0) {
      ctx->missingtags[ctx->decrement ++] = t;
    }
  }

  static void copy_seq(struct sbtree_t * tree, sbtidx_t t, void * data, size_t len) {
    (void) tree;
    (void) len;
    uint16_t * iter = (uint16_t *)data;
    uint8_t * value = (uint8_t *)(data + 2);
    uint16_t offset = * (uint16_t *)(data + TAGSIZE);
    uint16_t num = * (uint16_t *)(data + TAGSIZE + sizeof(uint16_t));
    uint16_t * ptr = (uint16_t *)(data + TAGSIZE + sizeof(uint16_t) * 2);
    uint8_t * tags = (uint8_t *)(data + TAGSIZE * 2);
    if (* iter < offset) {
    } else {
      if (* ptr < num) {
        memcpy(tags + (* ptr) * TAGSIZE, value + t * TAGSIZE, TAGSIZE);
        ,* ptr += 1;
      }
    }
    ,* iter += 1;
  }

  void core_do_action(enum CORE_ACTION action, void * data) {
    struct core_context_t * ctx = (struct core_context_t *) data;
    switch (action) {
    case CORE_INVENTORY_NEWLINE_ACK_NEWLINE_START_TIMER_ACTION:
      task_state = task_transform_state(task_state, TASK_SCAN_EVENT, NULL);
      epigyny_error(0);
      inventory_timer = systick + 9999; // 10 seconds
      break;
    case CORE_INVENTORY_ERROR_ACTION:
      epigyny_error(1);
      break;
    case CORE_DIFFERENCE_NEWLINE_ACK_NEWLINE_START_TIMER_ACTION:
      task_state = task_transform_state(task_state, TASK_SCAN_EVENT, NULL);
      epigyny_error(0);
      difference_timer = systick + 9999; // 10 seconds
      break;
    case CORE_DIFFERENCE_ERROR_ACTION:
      epigyny_error(2);
      break;
    case CORE_ACK_DATA_ACTION:
        switch (ctx->data_scope) {
        case INCREMENT_SCOPE: {
          if (ctx->offset < ctx->increment && ctx->num + ctx->offset <= ctx->increment) {
            epigyny_ack_data(ctx->data_scope, ctx->increment, ctx->offset, ctx->newtags + ctx->offset * TAGSIZE, ctx->num * TAGSIZE);
          } else {
            epigyny_ack_data(ctx->data_scope, ctx->increment, ctx->offset, ctx->newtags, 0);
          }
          break;
        }
        case DECREMENT_SCOPE: {
          if (ctx->offset < ctx->decrement && ctx->num + ctx->offset <= ctx->decrement) {
            epigyny_ack_data(ctx->data_scope, ctx->decrement, ctx->offset, ctx->missingtags + ctx->offset * TAGSIZE, ctx->num * TAGSIZE);
          } else {
            epigyny_ack_data(ctx->data_scope, ctx->decrement, ctx->offset, ctx->missingtags + ctx->offset * TAGSIZE, 0);
          }
          break;
        }
        case ALL_SCOPE: {
          uint8_t buf[(MAXRFID + 2) * TAGSIZE]; // the first TAGSIZE bytes save the iterator of tags and the address of data
          bzero(buf, (MAXRFID + 2) * TAGSIZE);  // and the second TAGSIZE bytes save the offset, the num params and count of copied tags
          ,* (uint8_t **)(buf + 2) = data_young;
          ,* (uint16_t *)(buf + TAGSIZE) = ctx->offset;
          ,* (uint16_t *)(buf + TAGSIZE + sizeof(uint16_t)) = ctx->num;
          sbtree_sequence(cache_young, copy_seq, buf, (MAXRFID + 2) * TAGSIZE);
          uint16_t count = *(uint16_t *)(buf + TAGSIZE + sizeof(uint16_t) * 2);
          epigyny_ack_data(ctx->data_scope, ctx->num, ctx->offset, buf, count * TAGSIZE);
          break;
        }
        }
      break;
    case CORE_DATA_ERROR_ACTION:
      epigyny_error(3);
      break;
    case CORE_COUNT_NEWLINE_ACK_INVENTORY_ACTION:
      ctx->num = cache_young->size[cache_young->root];
      epigyny_ack_inventory(ctx->door, ctx->num);
      break;
    case CORE_START_COOLDOWN_TIMER_ACTION:
      cooldown_timer = systick + 2999; // 3 seconds
      break;
    case CORE_CALCULATE_DIFFERENCE_NEWLINE_ACK_DIFFERENCE_ACTION: {
      uint8_t newtags[(MAXRFID + 2)]; // the first 2 bytes is reversed for length of array
      uint8_t missingtags[(MAXRFID + 2)]; // the first 2 bytes is reversed for length of array
      bzero(newtags, (MAXRFID + 2));
      bzero(missingtags, (MAXRFID + 2));
      sbtree_sequence(cache_young, new_seq, ctx, sizeof(struct core_context_t *));
      sbtree_sequence(cache_old, missing_seq, ctx, sizeof(struct core_context_t *));
      epigyny_ack_difference(ctx->door, ctx->increment, ctx->decrement);
      break;
    }
    case CORE_ACK_INVENTORY_ACTION:
      epigyny_ack_inventory(ctx->door, ctx->num);
      break;
    case CORE_ACK_DIFFERENCE_ACTION:
      epigyny_ack_difference(ctx->door, ctx->increment, ctx->decrement);
      break;
    }
  }
#+end_src

** 上位机回调
#+begin_src c :noweb-ref epigyny-callback-prototype
  void epigyny_callback(struct packet_t * packet);
#+end_src
#+begin_src c :noweb-ref epigyny-callback
  void epigyny_callback(struct packet_t * packet) {
    switch (packet->payload.cmd) {
    case INVENTORY_REQUEST:
      console_log("INVENTORY-REQUEST\r\n");
      core_context.door = packet->payload.door;
      if (task_state == TASK_READY_STATE) {
        core_state = core_transform_state(core_state, CORE_INVENTORY_COMMA_RFID_IDLE_EVENT, &core_context);
      } else {
        core_state = core_transform_state(core_state, CORE_INVENTORY_COMMA_RFID_BUSY_EVENT, &core_context);
      }
      break;
    case DIFFERENCE_REQUEST:
      console_log("DIFFERENCE-REQUEST\r\n");
      core_context.door = packet->payload.door;
      if (task_state == TASK_READY_STATE) {
        core_state = core_transform_state(core_state, CORE_DIFFERENCE_COMMA_RFID_IDLE_EVENT, &core_context);
      } else {
        core_state = core_transform_state(core_state, CORE_DIFFERENCE_COMMA_RFID_BUSY_EVENT, &core_context);
      }
      break;
    case DATA_REQUEST:
      console_log("DATA-REQUEST\r\n");
      if (task_state == TASK_READY_STATE) {
        core_context.data_scope = packet->payload.data_scope;
        core_context.offset = packet->payload.offset;
        core_context.num = packet->payload.len;
        core_state = core_transform_state(core_state, CORE_DATA_COMMA_RFID_IDLE_EVENT, &core_context);
      } else {
        core_state = core_transform_state(core_state, CORE_DATA_COMMA_RFID_BUSY_EVENT, &core_context);
      }
      break;
    default:
      console_log("UNKNOWN-REQUEST ");
      console_number(packet->payload.cmd);
      console_newline();
      break;
    }
  }
#+end_src
